// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enhanced Prisma Schema untuk Medsos Cosplayer

enum UserRole {
  USER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  slug      String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  bio       String?
  avatar    String?
  
  // Cosplayer specific fields
  cosplayerName     String?           // nama cosplayer (bisa beda dari username)
  specializations   Json?             // ["anime1", "game1"] - anime/game yang jadi spesialisasi
  location          String?           // kota/negara
  isVerified        Boolean @default(false)
  
  // Social media links
  socialLinks       Json?             // {instagram: "", tiktok: "", twitter: ""}
  
  // Stats (bisa dihitung dari relasi, tapi disimpan untuk performa)
  followersCount    Int @default(0)
  followingCount    Int @default(0)
  postsCount        Int @default(0)
  
  // Relations
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  stories           Story[]
  messagesSent      Message[] @relation("sentMessages")
  messagesReceived  Message[] @relation("receivedMessages")
  followers         Follower[] @relation("followers")
  following         Follower[] @relation("following")
  eventsCreated     Event[]
  eventParticipants EventParticipant[]
  
  // Admin features
  reportsCreated Report[] @relation("UserReports")
  reportsReviewed Report[] @relation("AdminReviews")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  content     String?
  
  // Cosplay specific
  character   String?               // nama karakter yang di-cosplay
  series      String?               // anime/game/series asal
  costume     String?               // deskripsi kostum
  
  media       Media[]
  comments    Comment[]
  likes       Like[]
  tags        Tag[]    @relation("PostTags")
  
  // Engagement stats
  likesCount    Int @default(0)
  commentsCount Int @default(0)
  
  // Visibility
  isPublic    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("posts")
}

model Media {
  id          String      @id @default(cuid())
  url         String
  type        MediaType
  altText     String?     // untuk accessibility
  width       Int?        // dimensi untuk layout
  height      Int?
  
  // Relations
  post        Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  story       Story?      @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId     String?
  message     Message?    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String?
  
  createdAt   DateTime    @default(now())
  
  @@map("media")
}

model Story {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  media     Media[]
  content   String?  // text overlay
  
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("stories")
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  
  // Nested comments
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Like {
  id       String   @id @default(cuid())
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  createdAt DateTime @default(now())
  
  @@unique([postId, userId]) // prevent duplicate likes
  
  @@map("likes")
}

model Follower {
  id          String   @id @default(cuid())
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId]) // prevent duplicate follows
  
  @@map("followers")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique  // untuk URL
  
  // Tag categories untuk cosplay
  category  String?  // "character", "series", "genre", "technique"
  
  posts     Post[]   @relation("PostTags")
  postsCount Int     @default(0) // untuk trending tags
  
  createdAt DateTime @default(now())
  
  @@map("tags")
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  content    String?
  media      Media[]
  
  // Message status
  isRead     Boolean  @default(false)
  readAt     DateTime?
  
  createdAt  DateTime @default(now())
  
  @@map("messages")
}

model Event {
  id          String   @id @default(cuid())
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  title       String
  description String?
  location    String?
  dateTime    DateTime
  
  // Event specific
  eventType   String?  // "convention", "photoshoot", "meetup"
  maxParticipants Int?
  status      EventStatus @default(UPCOMING)
  
  // Media
  coverImage  String?
  
  participants EventParticipant[]
  participantsCount Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("events")
}

model EventParticipant {
  id      String   @id @default(cuid())
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  
  // RSVP status
  status  String   @default("attending") // "attending", "maybe", "not_going"
  
  joinedAt DateTime @default(now())
  
  @@unique([eventId, userId])
  
  @@map("event_participants")
}

// Untuk admin features
model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id])
  
  // Bisa report post, user, atau comment
  postId      String?
  userId      String?
  commentId   String?
  
  reason      String   // "spam", "inappropriate", "harassment", etc.
  description String?
  status      String   @default("pending") // "pending", "reviewed", "resolved"
  
  // Admin yang handle
  reviewedById String?
  reviewedBy   User?   @relation("AdminReviews", fields: [reviewedById], references: [id])
  reviewedAt   DateTime?
  
  createdAt   DateTime @default(now())
  
  @@map("reports")
}